# Build a Docker image
# Build a Docker image to run, deploy, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/vsts/pipelines/languages/docker

name: Ros-Orchestration-CI

queue: 'Hosted Ubuntu 1604'

pr: none
trigger:
  branches:
    include:
    - master

variables:
  simulatorBaseImageName: simulator:latest
  robotBaseImageName: robot:latest
  simulatorImageName: 'simulator-orch:$(build.buildId)'
  robotImageName: 'robot-orch:$(build.buildId)'

steps:
- script: |
    # Pull down the base simulator image and tag to simulator
    docker login $(registry) -u $(registry-username) -p $(registry-password)
    docker pull $(registry)/$(simulatorBaseImageName)
    docker tag $(registry)/$(simulatorBaseImageName) simulator

    # Build new simulator-orch image
    docker build -f ./Robot/Dockerfile-simulator -t $(registry)/$(simulatorImageName) ./Robot/.
  displayName: 'docker build $(simulatorImageName)'

- script: |
    # Pull down the base robot image and tag to robot
    docker login $(registry) -u $(registry-username) -p $(registry-password)
    docker pull $(registry)/$(robotBaseImageName)
    docker tag $(registry)/$(robotBaseImageName) robot

    # Build new robot-orch image
    docker build -f ./Robot/Dockerfile-robot -t $(registry)/$(robotImageName) ./Robot/.
  displayName: 'docker build $(robotImageName)'

- script: |
    docker login $(registry) -u $(registry-username) -p $(registry-password)
    docker push $(registry)/$(simulatorImageName)
  displayName: 'docker push $(registry)/$(simulatorImageName)'

- script: |
    docker login $(registry) -u $(registry-username) -p $(registry-password)
    docker push $(registry)/$(robotImageName)
  displayName: 'docker push $(registry)/$(robotImageName)'

- task: CopyFiles@2
  inputs:
    sourceFolder: $(Build.SourcesDirectory)
    contents: 'helm/**' 
    targetFolder: '$(Build.ArtifactStagingDirectory)'
    cleanTargetFolder: true

- task: PublishBuildArtifacts@1
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'drop'